NAME="lua-argparse"
VERSION=0.7.1
RELEASE=1
CATEGORY="Lua"
SUMMARY="A feature-rich command-line argument parser"
DESCRIPTION="\
Argparse supports positional arguments, options, flags, optional
arguments, subcommands and more. Argparse automatically generates
usage, help, and error messages, and can generate shell completion
scripts.
"
HOMEPAGE="https://github.com/luarocks/argparse/"

GIT_REPO="https://github.com/luarocks/argparse"
declare -A GIT_DATEHASH_BY_NAME=(
  # git log --date=iso-strict --format='%cd/%H' -1
  [0.7.1]=2020-07-08T11:17:50+10:00/0.7.1
)
REV_HASH="${GIT_DATEHASH_BY_NAME[${VERSION}]#*/}"
REV_DATE="${GIT_DATEHASH_BY_NAME[${VERSION}]%/*}"
REV_DATE_SHORT="${REV_DATE%%T*}"
GIT_BASENAME="${GIT_REPO##*/}"
SRC_URI="${GIT_REPO}/archive/${REV_HASH}/${GIT_BASENAME}-${VERSION}.tar.gz"
SRC_DIR="${GIT_BASENAME}-${REV_HASH#v}"

ARCH="noarch"

################################
LUA_VERSIONS="5.3:5.4"
LUA_PKG_NAME="${NAME#lua-}"
source lua.experiment

################################
## Patch files
################################
# Patch filenames are in a default style of 'git format-patch'
PATCH_URI=$(\
  find -maxdepth 1 -type f -name '[0-9][0-9][0-9][0-9]-*.patch' \
  | sort \
)
# Additional patches, if any
PATCH_URI+="
"

################################
## Requirements for building
################################
BUILD_REQUIRES="\
  pkg-config\
  lua53-devel\
  lua54-devel\
"
# TEST_REQUIRES="\
# "

################################
ABI=0


################################
_CYGPORT_RESTRICT_postinst_doc_=1

set_packages_lua() {
  local LUA_VERSION=$1
  local LUA_PKG_NAME=$2
  __set_variables_lua ${LUA_VERSION}

  __add_pkg "lua${LUA_VERSION_CYG}-${LUA_PKG_NAME}"
  __set_pkg_property . CONTENTS "
    usr/share/doc/lua${LUA_VERSION_CYG}-*
    usr/*/lua/${LUA_VERSION}/
  "
  __set_pkg_property . REQUIRES "lua${LUA_VERSION_CYG}"
  __set_pkg_property . REQUIRES_SUPPRESS "${COMMON_REQUIRES_SUPPRESS}"
}

set_packages() {
  local LUA_PKG_NAME=$1
  local LUA_VERSION
  COMMON_REQUIRES_SUPPRESS=
  for LUA_VERSION in ${LUA_VERSIONS//:/ }; do
    __set_variables_lua ${LUA_VERSION}
    COMMON_REQUIRES_SUPPRESS+=" lua${LUA_VERSION_CYG}-${LUA_PKG_NAME}"
  done

  for LUA_VERSION in ${LUA_VERSIONS//:/ }; do
    set_packages_lua ${LUA_VERSION} ${LUA_PKG_NAME}
  done
}

set_packages ${LUA_PKG_NAME}

################################
src_compile_lua() {
  local LUA_VERSION=$1
  local LUA_PKG_NAME=$2
  __set_variables_lua ${LUA_VERSION}

  mkdir -p ${B}/${LUA_VERSION}
  cd  ${B}/${LUA_VERSION}
  inform "[Compile] Lua ${LUA_VERSION}: ${LUA_PKG_NAME}"

  lndirs ${S} .
}

################################
src_install_lua() {
  local LUA_VERSION=$1
  local LUA_PKG_NAME=$2
  __set_variables_lua ${LUA_VERSION}

  cd ${B}/${LUA_VERSION}
  inform "[Install] Lua ${LUA_VERSION}: ${LUA_PKG_NAME}"

  insinto ${LUA_SCRIPTDIR}
  doins src/argparse.lua

  docinto /lua${LUA_VERSION_CYG}-${LUA_PKG_NAME}
  dodoc LICENSE *.md *.rockspec
}

################################
src_test_lua() {
  local LUA_VERSION=$1
  local LUA_PKG_NAME=$2
  __set_variables_lua ${LUA_VERSION}

  cd ${B}/${LUA_VERSION}
  inform "[Test] Lua ${LUA_VERSION}: ${LUA_PKG_NAME}"
  lua${LUA_VERSION} -v

  echo "No test suite."
}

################################
